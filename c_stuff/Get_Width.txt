/* Maximum width of a binary tree */

int get_width(struct node* root)
{
	if(root==null)
		return 0;
	int height=_get_height(root);
	int i;
	for(i=1;i<=height;i++)
	{
		int width=get_width(root,i);
		if(width>max_width)
			max_width=width;
	}
	return max_width;
}
int get_width(struct node* root,int level)
{
	if(root==null)
		return 0;	
	if(level==1)
		return 1; 
	else if(level >1)
	{
		return get_width(root->left,level-1) + get_width(root->right,level-1);
	}
}

/* Method 2-Using Count Array */

void fill_count_array(struct node* root,int level,int arr[])
{
	if(root)
	{
		arr[level]++;
		fill_count_array(root->left,level+1,arr);
		fill_count_array(root->right,level+1,arr);
	{
}
int get_max_width(struct node* root)
{
	if(root==null)
		return 0;
	int height=get_height(root);

	int *count=(int*)calloc(sizeof(int),height);
	int level=0;
	fill_count_array(root,level,count);
	return get_max(count);
}